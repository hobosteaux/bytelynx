Mitigating Malicious Attacks
============================

There are numerous attack vectors that a remote party could user to attack bytelynx.
This is an attempt to cover each vector, as well as how it is being mitigated

If a mitigation strategy is in italics, it still must be implemented.

Contact impersonation
+++++++++++++++++++++
This would happen if someone was to execute a MitM attack or masquerade as a different client.
They would claim that their id on the network as a given hash, but not actually be them.

**Mitigation**

All hashes (ids on the DHT) are tied to a node's public key.
During the handshake for connecting, the node goes through a RSA handshake, providing their public key.
This is then hashed by the other client to ensure that it matches the given node id.
If not, the connection it terminated.

*If a node is rejected because their node id does not match their public key, then that ip addr is blacklisted*

DHT key collisions
++++++++++++++++++
Within all probablility, two clients will most likely end up with the same hash given two different keys.
The system is not made to handle this right now, and will probably break for both clients.

**Mitigation**

*No real mitigation as of right now.*

Keysize is large enough (320 bits) that the probability of collision is extremely low.
Although this isn't 'secure', it seems like a good enough band-aid until other problems are solved.

Contact search blackholing
++++++++++++++++++++++++++
Whenever a DHT search comes across a malicious client, they could provide false results.
If they include the answer in it, this would most likely short-circuit the search process.
It could also begin to introduce fake clients into the search results of other clients, poisoning the DHT.

**Mitigation**

*Clients will not be included in a node's response to another unless that node has been in contact.*

*When doing a search, a 'voting' process whill occur.
This will be based on how close the node id is to the target hash (ranked) and the amount of nodes that corraborated that it existed.*

Joining DHT networks
++++++++++++++++++++
A malicious third party could connect to network *A* and then network *B*.
They would then act as a normal client in both, bridging requests and eventually joining two DHT networks into one.

**Mitigation**

Each network has a unique 'passphrase'.
This is an autogenerated parameter for G in the diffie-hellman exchange.
When a node connects to another one, the G acts as a pre-shared key and will only allow the DH exchance to succeed if both clients agree on it.

This does not fix a malicious client acting as a standalone bridge, but that node would be the sole connection between the two.
